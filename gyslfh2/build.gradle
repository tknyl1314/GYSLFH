apply plugin: 'com.android.application'

//GreenDao
apply plugin: 'org.greenrobot.greendao' // apply plugin
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 26
    //buildToolsVersion '27.0.3'

    aaptOptions {
        cruncherEnabled = false
        useNewCruncher = false
    }
    //aaptOptions.cruncherEnabled = false
    //aaptOptions.useNewCruncher = false


    defaultConfig {
        applicationId "com.titan.newslfh"
        minSdkVersion 19  //18 Andoird 4.3 野狗要求4.4以上
        targetSdkVersion 23//百度导航要求
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        manifestPlaceholders = [
                GETUI_APP_ID    : "gJPwaKTz0V9HzcQnR6Zp43",
                GETUI_APP_KEY   : "Xzi2FrT2Wf7Ovzs3qm8bN2",
                GETUI_APP_SECRET: "bw2Ob8b07y95dChJxiD2q3"
        ]

        //向上兼容矢量动画
        vectorDrawables.useSupportLibrary = true

        //Enabling multidex support.
        multiDexEnabled true
        /*ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi-v7a', 'armeabi', 'x86'
            //abiFilters  'armeabi'
            // 'armeabi','x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }*/

        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }



    greendao {
        //当前数据库版本
        schemaVersion 4
        //由GreenDao自动生成代码所在的包名，默认的是在项目包下面新建一个gen。
        daoPackage 'com.titan.data.greendao'
        //设置自动生成代码的目录
        targetGenDir 'src/main/java'
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            res.srcDirs = ['src/main/res', 'src/main/res/menu']
        }
    }
    repositories {
        jcenter()

    }
    dataBinding {
        enabled = true
    }
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/rxjava.properties'
    }
    signingConfigs {
        //签名的配置
        release {
            storeFile file("Titan.jks")
            storePassword '123123'
            keyAlias 'titan打包'
            keyPassword '123123'
        }
    }
    buildTypes {
        release {
            shrinkResources false//去除不用的资源文件
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            /*applicationVariants.all { variant ->
                if (variant.buildType.name.equals('release')) {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "GYSLFH_${releaseTime()}_${defaultConfig.versionName}_release.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }*/
        }
        debug {
            shrinkResources false//去除不用的资源文件
            minifyEnabled false  //是否混淆  Android Studio disables ProGuard when using Instant Run.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
           /* applicationVariants.all { variant ->
                if (variant.buildType.name.equals('debug')) {
                    variant.outputs.each { output -> def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "GYSLFH_${releaseTime()}_${defaultConfig.versionName}_debug.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }*/

        }
    }
    lintOptions {
        //设置编译的lint开关，程序在buid的时候，会执行lint检查，有任何的错误或者警告提示，都会终止构建
        abortOnError false
    }

    /*externalNativeBuild {
        ndkBuild {
            path 'jni/Android.mk'
        }
    }*/
}
kapt {
    generateStubs = true
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-v4:26.1.0'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    )

    //implementation 'com.android.support:appcompat-v7:26.1.0'

    //implementation 'com.android.support:support-v4:26.1.0'

    implementation 'com.android.support:design:26.1.0'
    implementation 'com.android.support:cardview-v7:26.1.0'
    implementation 'com.android.support:recyclerview-v7:26.1.0'



    /** kotlin */
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /** 个推 */
    implementation 'com.getui:sdk:2.11.1.0'

    /** Spatialite */

    //compile files('libs/spatialite-android-library.jar')

    /** 海康 */
    implementation files('libs/AudioEngineSDK.jar')
    implementation files('libs/HCNetSDK.jar')
    implementation files('libs/PlayerSDK.jar')
    implementation files('libs/jedis-2.8.1.jar')

    /** 测试框架 */

    // Dependencies for Android unit tests
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testImplementation "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testImplementation "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"
    kapt 'com.android.databinding:compiler:3.1.2'

    /** multidex  */
    implementation 'com.android.support:multidex:1.0.3'

    /*androidTestImplementation 'com.android.support:multidex:1.0.3'
            androidTestImplementation 'com.android.support:multidex-instrumentation:1.0.3'
            androidTestImplementation 'com.android.support:multidex:1.0.3'*/
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'

    //implementation 'com.github.wuhongsheng:TitanLib:0.4.3'
    /** 拍照 */
    compile 'cn.finalteam.rxgalleryfinal:library:0.0.3'
    /** 图片加载库  */
    implementation 'com.facebook.fresco:fresco:1.5.0'
    implementation 'com.nostra13.universalimageloader:universal-image-loader:1.9.5'

    /** 日期选择  */
    implementation 'com.jzxiang.pickerview:TimePickerDialog:1.0.1'

    /** GreenDao  */
    implementation 'org.greenrobot:greendao:3.2.2'

    /** Arcgis  */
    implementation 'com.esri.arcgisruntime:arcgis-android:100.2.1'

    /** bugly  */
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.4'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'

    /** Retrofit      */
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.3.0'
    implementation('com.squareup.retrofit2:converter-simplexml:2.1.0') {
        exclude module: 'stax-api'
        exclude module: 'stax'
        exclude module: 'xpp3'
    }

    /** rx */
    implementation 'io.reactivex:rxandroid:1.2.1'

    /** 声网SDK */
    implementation project(':agoralibrary')

    //implementation project(':library')
    implementation files('libs/BaiduLBS_Android.jar')
}

/**
 * @return
 */
def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
}
